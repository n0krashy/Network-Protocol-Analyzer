/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package networkProtocolAnalyzer;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static networkProtocolAnalyzer.StartPanel.errbuf;
import java.util.Date;
import org.jnetpcap.Pcap;
import org.jnetpcap.PcapDumper;
import org.jnetpcap.packet.PcapPacket;
import org.jnetpcap.packet.PcapPacketHandler;
import org.jnetpcap.protocol.network.Ip4;
import org.jnetpcap.protocol.tcpip.Tcp;

/**
 *
 * @author n0krashy
 */
public class MainPanel extends javax.swing.JPanel {

    /**
     * Creates new form MainPanel
     */
    Pcap pcap;
    PcapPacketHandler<String> jpacketHandler;
    DefaultTableModel dtm;
    PcapDumper dumper;

    public MainPanel() {
        initComponents();
        startDevice();
    }

    public void startDevice() {
        int snaplen = 64 * 1024;           // Capture all packets, no trucation  
        int flags = Pcap.MODE_PROMISCUOUS; // capture all packets  
        int timeout = 10 * 1000;           // 10 seconds in millis  
        pcap
                = Pcap.openLive(StartPanel.device.getName(), snaplen, flags, timeout, StartPanel.errbuf);

        if (pcap == null) {
            JOptionPane.showMessageDialog(null,
                    "Error while opening device for capture: " + errbuf.toString(),
                    "Device opening Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        //String ofile = "tmp-capture-file.cap";
        //dumper = pcap.dumpOpen(ofile);
        dtm = (DefaultTableModel) packetsTable.getModel();
        jpacketHandler = new PcapPacketHandler<String>() {
            int i = 1;
            Tcp tcp = new Tcp();
            Ip4 ip = new Ip4();
            byte[] sIP = new byte[4];
            byte[] dIP = new byte[4];
            String sourceIP;
            String destIP;
            String protocol;

            public void nextPacket(PcapPacket packet, String user) {
                if (packet.hasHeader(ip)) {
                    // get Source IP address
                    sIP = packet.getHeader(ip).source();
                    sourceIP = org.jnetpcap.packet.format.FormatUtils.ip(sIP);

                    // get destination IP address
                    dIP = packet.getHeader(ip).destination();
                    destIP = org.jnetpcap.packet.format.FormatUtils.ip(dIP);

                    if (packet.hasHeader(tcp)) {
                        if (tcp.source() == 80) {
                            protocol = "HTTP";
                        } else if (tcp.source() == 23) {
                            protocol = "Telnet";
                        }
                    } else {
                        protocol = "";
                    }
                    // add GUI row in packets table
                    dtm.addRow(new Object[]{i, new Date(packet.getCaptureHeader().timestampInMillis()), sourceIP, destIP, protocol, packet.getCaptureHeader().caplen(), ""});
                    i++;

                }
                //dumper.dump(packet);
            }

        };
    }

    public void deviceController(boolean startCapture) {
        if (startCapture == true) {
            Thread t = new Thread(new Runnable() {
                @Override
                public void run() {
                    pcap.loop(Pcap.LOOP_INFINITE, jpacketHandler, "");
                }
            });
            t.start();
            startStopButton.setText("Stop");
        } else {
            pcap.breakloop();
            //dumper.close();
            pcap.close();
            startStopButton.setText("Start");
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startStopButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        packetsTable = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();

        startStopButton.setText("Start");
        startStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startStopButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");

        packetsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Time", "Source", "Destination", "Protocol", "Length", "Info"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(packetsTable);

        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 744, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startStopButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveButton))
                    .addComponent(jScrollPane1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startStopButton)
                    .addComponent(saveButton))
                .addGap(57, 57, 57)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void startStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startStopButtonActionPerformed
        if (startStopButton.getText().equalsIgnoreCase("Start")) {
            deviceController(true);
        } else {
            deviceController(false);
        }

    }//GEN-LAST:event_startStopButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable packetsTable;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton startStopButton;
    // End of variables declaration//GEN-END:variables
}
